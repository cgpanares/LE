import subprocess
import traceback
import argparse
import datetime
import winreg
import yaml
import time
import sys
import os

import win32api
import win32con
import win32gui

from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtWidgets import QMainWindow, QSystemTrayIcon, QMenu, QAction, QMessageBox, QWidget, QPlainTextEdit, \
    QVBoxLayout

# PRE-FUNCTIONS #

parser = argparse.ArgumentParser(description='LE Session Manager commands.', add_help=False)
parser.add_argument('-h', '--help', action='store_true')
parser.add_argument('-v', '--version', action='store_true')
parser.add_argument('-t', '--timer', metavar='<int>',
                    help='Sets the session manager timer (value=integer interpreted as seconds). Maximum is 28800 seconds.',
                    required=('-nomaintenance' in sys.argv or '--nomaintenanceTimer' in sys.argv))
parser.add_argument('-st', '--maintenanceTimer', metavar='<int>', default="900",
                    help='Sets the MAINTENANCE status checking interval (in seconds/integer). Default is 900. Maximum is 3600 seconds.')
parser.add_argument('-nomaintenance', '--nomaintenanceTimer', action='store_true', help=argparse.SUPPRESS)

args = vars(parser.parse_args())

# icons (base64)
image_icon = b"""

"""

refresh_icon = b"""
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
"""


def wndproc(hwnd, msg, wparam, lparam):
    """
        lparam events:
        - 2147483648 (Logoff)
        - 0 (shutdown/reboot)
        - 1073741824 (forced shut down)
        - 1 (graceful exit) this is excluded.
    """
    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - WinEvent lparam: " + str(
        lparam), flush=True)
    if str(lparam) != "1":
        logged_user = os.getenv('username')
        log_message = "User '" + str(logged_user) + "' has been logged off."
        print(
            datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
            flush=True)
        if checkEventSource(event_log_name, event_log_source) == "True":
            addEvent(event_log_name, event_log_source, "110", log_message)
        else:
            createEventLog(event_log_name, event_log_source)
            addEvent(event_log_name, event_log_source, "110", log_message)
        sys.stdout.close()
        try:
            os.remove("config.yaml")
        except OSError as e:
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[WARNING] - " + str(e),
                  flush=True)


def wndproc_func():
    win_mdl_hInst = win32api.GetModuleHandle(None)
    wndclass = win32gui.WNDCLASS()
    wndclass.hInstance = win_mdl_hInst
    wndclass.lpszClassName = "SessionManagerClass"
    messageMap = {win32con.WM_QUERYENDSESSION: wndproc,
                  win32con.WM_ENDSESSION: wndproc,
                  win32con.WM_QUIT: wndproc,
                  win32con.WM_DESTROY: wndproc,
                  win32con.WM_CLOSE: wndproc}
    wndclass.lpfnWndProc = messageMap

    try:
        print(
            datetime.datetime.now().astimezone().strftime(
                "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - Start monitoring windows logoff/shutdown/restart events",
            flush=True)
        sm_WindClass = win32gui.RegisterClass(wndclass)
        hwnd = win32gui.CreateWindowEx(win32con.WS_EX_LEFT, sm_WindClass, "SessionManagerWindow", 0, 0, 0,
                                       win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, 0, 0, win_mdl_hInst, None)
    except Exception as e:
        var = traceback.format_exc()
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
              flush=True)
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
              flush=True)

def secs_to_minsec(secs: int):
    mins = secs // 60
    secs = secs % 60
    minsec = f'{mins:02}:{secs:02}'
    return minsec


def addEvent(event_log, event_source, event_id, event_message):

    try:
        with subprocess.Popen(["start", "/B", "/wait", "powershell", "Write-EventLog", "-LogName", "\"" + event_log + "\"",
                           "-Source", "\"" + event_source + "\"", "-EntryType", "Information", "-EventId", "\"" + event_id + "\"", "-Message",
                           "\"" + event_message + "\""], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                          shell=True) as p:
            for line in p.stdout:
                print(line.rstrip().decode("utf-8"), flush=True)
            temp_err = p.stderr.read().rstrip().decode("utf-8")
            if temp_err != "":
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + temp_err, flush=True)
    except Exception as e:
        var = traceback.format_exc()
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
              flush=True)
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
              flush=True)


def createEventLog(event_log, event_source):

    try:
        with subprocess.Popen(["start", "/B", "/wait", "powershell", "New-EventLog", "-LogName", "\"" + event_log + "\"",
                           "-Source", "\"" + event_source + "\""], stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                          shell=True) as p:
            for line in p.stdout:
                print(line.rstrip().decode("utf-8"), flush=True)
            temp_err = p.stderr.read().rstrip().decode("utf-8")
            if temp_err != "":
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + temp_err, flush=True)
    except Exception as e:
        var = traceback.format_exc()
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
              flush=True)
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
              flush=True)


def checkEventSource(event_log, event_source):
    i = 0
    while True:
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SYSTEM\CurrentControlSet\Services\EventLog\\" + event_log)
            assert key != None, "Key = None"
            KeyName = winreg.EnumKey(key, i)
            if KeyName == event_source:
                return "True"
            i += 1
        except Exception as e:
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
                  flush=True)
            print(datetime.datetime.now().astimezone().strftime(
                "%m-%d-%Y %H:%M:%S [%z]") + "[WARNING] - " + "Cannot find the event log or source.", flush=True)
            return "Cannot find the event log or source"


def iconFromBase64(base64):
    pixmap = QtGui.QPixmap()
    pixmap.loadFromData(QtCore.QByteArray.fromBase64(base64))
    icon = QtGui.QIcon(pixmap)
    return icon

# MAIN #

event_log_name = "<event_name>"
event_log_source = "LE Session Manager"
timestr = time.strftime("%Y%m%d-%H%M%S")
timestrlogs = time.strftime("%A, %d %B %Y %I:%M%p %Z")
filename_log = timestr + "-attempt"
TIMER_DURATION_INT = 0
CURRENT_TIMER_DURATION_INT = 0
MAINTENANCE_TIMER_DURATION_INT = 0
CURRENT_MAINTENANCE_TIMER_DURATION_INT = 0
CONTINUE_TIMER = None

def pre_start():
    global TIMER_DURATION_INT
    global CURRENT_TIMER_DURATION_INT
    global MAINTENANCE_TIMER_DURATION_INT
    global CURRENT_MAINTENANCE_TIMER_DURATION_INT
    global CONTINUE_TIMER


    try:
        os.mkdir("logs")
    except OSError:
        list_of_files = os.listdir('logs')
        full_path = ["logs/{0}".format(x) for x in list_of_files]
        if len(list_of_files) == 10:
            oldest_file = min(full_path, key=os.path.getctime)
            os.remove(oldest_file)
    sys.stdout = open("logs/" + filename_log + ".log", "w")
    print("LE Session Manager - " + timestrlogs, flush=True)

    wndproc_func()

    try:
        if args["timer"] and not args["nomaintenanceTimer"]:
            log_message = "[-t/--timer] is set. Overwriting the config file (if exists) and to use values from the arguments given and continue..."
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
                  flush=True)

            if (int(args["timer"]) <= 28800) and (int(args["maintenanceTimer"]) <= 3600):
                try:
                    os.remove("config.yaml")
                except OSError as e:
                    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[WARNING] - " + str(e),
                          flush=True)

                TIMER_DURATION_INT = int(args["timer"])
                MAINTENANCE_TIMER_DURATION_INT = int(args["maintenanceTimer"])

                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "Timer new duration value: " + str(
                    secs_to_minsec(TIMER_DURATION_INT)) + " (minutes:seconds)",
                      flush=True)
                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "MAINTENANCE interval new timer duration value: " + str(
                    secs_to_minsec(MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)", flush=True)

                if checkEventSource(event_log_name, event_log_source) == "True":
                    addEvent(event_log_name, event_log_source, "110", "Timer new duration value: " + str(
                        secs_to_minsec(TIMER_DURATION_INT)) + " (minutes:seconds)")
                    addEvent(event_log_name, event_log_source, "110", "MAINTENANCE interval new timer duration value: " + str(
                        secs_to_minsec(MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)")
                else:
                    createEventLog(event_log_name, event_log_source)
                    addEvent(event_log_name, event_log_source, "110", "Timer new duration value: " + str(
                        secs_to_minsec(TIMER_DURATION_INT)) + " (minutes:seconds)")
                    addEvent(event_log_name, event_log_source, "110", "MAINTENANCE interval new timer duration value: " + str(
                        secs_to_minsec(MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)")

                if checkEventSource(event_log_name, event_log_source) == "True":
                    addEvent(event_log_name, event_log_source, "111", "LE Session Manager has been started.")
                else:
                    createEventLog(event_log_name, event_log_source)
                    addEvent(event_log_name, event_log_source, "111", "LE Session Manager has been started.")
            else:
                raise Exception(
                    "Logoff timer should be not more than 8 hours (28800 seconds) and MAINTENANCE timer should be not more than 1 hour (3600 seconds). Please try again.")

        elif args["timer"] and args["nomaintenanceTimer"]:
            log_message = "[-nomaintenance/--nomaintenanceTimer] is set. Disabling MAINTENANCE checking..."
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
                  flush=True)
            if int(args["timer"]) <= 28800:
                TIMER_DURATION_INT = int(args["timer"])
                MAINTENANCE_TIMER_DURATION_INT = 0

                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "Timer new duration value: " + str(
                    secs_to_minsec(TIMER_DURATION_INT)) + " (minutes:seconds)",
                      flush=True)
                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "MAINTENANCE interval new timer duration value: N/A", flush=True)
            else:
                raise Exception("Timer should not be more than 8 hours (28800 seconds). Please try again.")
        else:
            config_file = open("config.yaml")
            data = yaml.safe_load(config_file)

            log_message = "[--timer] or [-t] is not set. Loading existing timer and maintenanceTimer last state from config..."
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
                  flush=True)

            if (int(data["originalTimer"]) <= 28800) and (int(data["currentTimer"]) <= 28800) and (int(data["originalmaintenanceTimer"]) <= 3600) and (int(data["currentmaintenanceTimer"]) <= 3600):
                TIMER_DURATION_INT = int(data["originalTimer"])
                MAINTENANCE_TIMER_DURATION_INT = int(data["originalmaintenanceTimer"])
                CURRENT_TIMER_DURATION_INT = int(data["currentTimer"])
                CURRENT_MAINTENANCE_TIMER_DURATION_INT = int(data["currentmaintenanceTimer"])
                CONTINUE_TIMER = True

                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "Timer duration value left: " + str(
                    secs_to_minsec(CURRENT_TIMER_DURATION_INT)) + " (minutes:seconds)", flush=True)
                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "MAINTENANCE interval timer duration value left: " + str(
                    secs_to_minsec(CURRENT_MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)", flush=True)

                if checkEventSource(event_log_name, event_log_source) == "True":
                    addEvent(event_log_name, event_log_source, "110", "Timer duration value left: " + str(
                        secs_to_minsec(CURRENT_TIMER_DURATION_INT)) + " (minutes:seconds)")
                    addEvent(event_log_name, event_log_source, "110", "MAINTENANCE interval timer duration value left: " + str(
                        secs_to_minsec(CURRENT_MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)")
                else:
                    createEventLog(event_log_name, event_log_source)
                    addEvent(event_log_name, event_log_source, "110", "Timer duration value left: " + str(
                        secs_to_minsec(CURRENT_TIMER_DURATION_INT)) + " (minutes:seconds)")
                    addEvent(event_log_name, event_log_source, "110", "MAINTENANCE interval timer duration value left: " + str(
                        secs_to_minsec(CURRENT_MAINTENANCE_TIMER_DURATION_INT)) + " (minutes:seconds)")

                if checkEventSource(event_log_name, event_log_source) == "True":
                    addEvent(event_log_name, event_log_source, "112", "LE Session Manager has been resumed.")
                else:
                    createEventLog(event_log_name, event_log_source)
                    addEvent(event_log_name, event_log_source, "112", "LE Session Manager has been resumed.")
            else:
                raise Exception(
                    "Logoff timer should be not more than 8 hours (28800 seconds) and MAINTENANCE timer should be not more than 1 hour (3600 seconds). Please try again.")

    except Exception as e:
        var = traceback.format_exc()
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var), flush=True)
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e), flush=True)
        if checkEventSource(event_log_name, event_log_source) == "True":
            addEvent(event_log_name, event_log_source, "113", str(e))
        else:
            createEventLog(event_log_name, event_log_source)
            addEvent(event_log_name, event_log_source, "113", str(e))
        sys.stdout.close()
        file = os.getcwd() + "\\logs\\" + filename_log + ".log"
        subprocess.Popen(["notepad.exe", file])
        sys.exit(1)


class App(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()

        self.timestr = time.strftime("%Y%m%d-%H%M%S")
        self.timestrlogs = time.strftime("%A, %d %B %Y %I:%M%p %Z")
        self.filename_log = self.timestr + "-attempt"

        if CONTINUE_TIMER:
            self.time_left_int = CURRENT_TIMER_DURATION_INT  # setting the duration of the timer
            self.maintenanceTimerInterval = CURRENT_MAINTENANCE_TIMER_DURATION_INT
        else:
            self.time_left_int = TIMER_DURATION_INT  # setting the duration of the timer
            self.maintenanceTimerInterval = MAINTENANCE_TIMER_DURATION_INT
        self.appTimer = QtCore.QTimer(self)  # setting the QTimer module in a variable
        self.maintenanceTimer = QtCore.QTimer(self)
        self.backupTimer = QtCore.QTimer(self)
        self.winEventTimer = QtCore.QTimer(self)

        # App window
        self.win = QMainWindow()
        self.win.setFixedSize(352, 206)
        self.win.setWindowTitle("LE Session Manager")
        self.win.setWindowFlags(QtCore.Qt.WindowCloseButtonHint)
        self.win.setWindowFlag(QtCore.Qt.WindowCloseButtonHint, False)
        self.win.closeEvent = self.closeEvent

        self.icon = iconFromBase64(image_icon)
        self.win.setWindowIcon(self.icon)

        # Widgets

        # MAINTENANCE status
        self.maintenanceStatus_lbl = QtWidgets.QLabel(self.win)
        self.maintenanceStatus_lbl.setGeometry(QtCore.QRect(60, 10, 231, 20))
        self.maintenanceStatus_lbl.setText("Initializing...")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.maintenanceStatus_lbl.setFont(font)
        self.maintenanceStatus_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.maintenanceStatus_lbl.setObjectName("maintenanceStatus_lbl")

        # time to check status
        self.ttcStatus_lbl = QtWidgets.QLabel(self.win)
        self.ttcStatus_lbl.setGeometry(QtCore.QRect(60, 30, 231, 20))
        self.ttcStatus_lbl.setText("None")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ttcStatus_lbl.setFont(font)
        self.ttcStatus_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.ttcStatus_lbl.setObjectName("ttcStatus_lbl")

        # timer label
        self.timer_lbl = QtWidgets.QLabel(self.win)
        self.timer_lbl.setGeometry(QtCore.QRect(70, 50, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.timer_lbl.setFont(font)
        self.timer_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_lbl.setObjectName("timer_lbl")
        self.timer_lbl.setText("Logoff Timer:")

        # current timer and frame
        self.timer_frame = QtWidgets.QFrame(self.win)
        self.timer_frame.setGeometry(QtCore.QRect(70, 90, 211, 61))
        self.timer_frame.setAutoFillBackground(True)
        self.timer_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.timer_frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.timer_frame.setObjectName("timer_frame")
        self.timerLabel = QtWidgets.QLabel(self.timer_frame)
        self.timerLabel.setGeometry(QtCore.QRect(50, 20, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.timerLabel.setFont(font)
        self.timerLabel.setMidLineWidth(0)
        self.timerLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.timerLabel.setObjectName("currentTime_lbl")
        self.timerLabel.setText("00:00")

        # Reset Timer Button
        self.resettmr_btn = QtWidgets.QPushButton(self.win)
        self.resettmr_btn.setText("Reset Timer")
        self.resettmr_btn.setGeometry(QtCore.QRect(130, 160, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.resettmr_btn.setFont(font)
        self.resettmr_btn.setObjectName("resettmr_btn")
        self.resettmr_btn.clicked.connect(self.resetTimer)
        self.resettmr_btn.setEnabled(False)

        #Minimize button
        self.minimize_btn = QtWidgets.QPushButton(self.win)
        self.minimize_btn.setGeometry(QtCore.QRect(300, 0, 51, 23))
        self.minimize_btn.setObjectName("minimize_btn")
        self.minimize_btn.setText("Minimize")
        self.minimize_btn.clicked.connect(self.systemTrayMsg)

        self.retry_maintenance_btn = QtWidgets.QPushButton(self.win)
        self.retry_maintenance_btn.setGeometry(QtCore.QRect(280, 0, 21, 23))
        self.retry_maintenance_btn.setText("")
        self.retry_icon = iconFromBase64(refresh_icon)
        self.retry_maintenance_btn.setIcon(self.retry_icon)
        self.retry_maintenance_btn.setObjectName("retry_maintenance_btn")
        self.retry_maintenance_btn.clicked.connect(self.retryMAINTENANCEcheck)
        self.retry_maintenance_btn.hide()

        # Init QSystemTrayIcon
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(self.icon)
        self.tray_icon.activated.connect(self.onTrayIconActivated)

        show_action = QAction("Show", self)
        hide_action = QAction("Hide", self)
        show_action.triggered.connect(self.show)
        hide_action.triggered.connect(self.systemTrayMsg)
        tray_menu = QMenu()
        tray_menu.addAction(show_action)
        tray_menu.addAction(hide_action)
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()

        # Show window
        self.win.show()

        if MAINTENANCE_TIMER_DURATION_INT != 0:
            self.backupTimer.timeout.connect(lambda: self.backupConfig("INFO", ""))
            self.backupTimer.start(30000)

        self.winEventTimer.timeout.connect(lambda: win32gui.PumpWaitingMessages())
        self.winEventTimer.start(1000)

        self.update_app_timer()
        self.update_maintenance_timer()

        self.ThreadingClass = ThreadingClass()
        self.ThreadingClass.start()
        self.ThreadingClass.maintenance_signal.connect(self.updateMAINTENANCEStatus_first_time)

    def backupConfig(self, msgType, log_message):
        yaml_dict = {"originalTimer": TIMER_DURATION_INT, "currentTimer": self.time_left_int,
                     "originalmaintenanceTimer": MAINTENANCE_TIMER_DURATION_INT, "currentmaintenanceTimer": self.maintenanceTimerInterval}
        with open("config.yaml", "w") as x:
            yaml.dump(yaml_dict, x)
        if log_message != "":
            if checkEventSource(event_log_name, event_log_source) == "True":
                addEvent(event_log_name, event_log_source, "113", log_message)
            else:
                createEventLog(event_log_name, event_log_source)
                addEvent(event_log_name, event_log_source, "113", log_message)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[" + msgType + "] - " + log_message,
                  flush=True)
        else:
            print(datetime.datetime.now().astimezone().strftime(
                "%m-%d-%Y %H:%M:%S [%z]") + "[" + msgType + "] - Config backup has been executed.",
                  flush=True)

    def closeEvent(self, event):
        if self.time_left_int != 0:
            self.backupConfig("WARNING",
                              "An attempt to close the application has been executed. Storing config for backup...")
            self.systemTrayMsg()
            event.ignore()
        if self.maintenanceTimerInterval == 0:
            self.maintenanceTimerInterval = 1

    def show(self):
        self.win.show()

    def hide(self):
        self.win.hide()

    def systemTrayMsg(self):
        self.hide()
        self.tray_icon.showMessage(
            "LE Session Manager",
            "Application was minimized to tray. Running in background...",
            QSystemTrayIcon.Information,
            2000
        )

    def onTrayIconActivated(self, reason):
        if reason == QSystemTrayIcon.DoubleClick:
            self.show()

    def startAppTimer(self):
        if CONTINUE_TIMER:
            self.time_left_int = CURRENT_TIMER_DURATION_INT
        else:
            self.time_left_int = TIMER_DURATION_INT

        self.appTimer.timeout.connect(self.timerTimeout)
        self.appTimer.start(1000)

        self.maintenanceTimer.timeout.connect(self.maintenanceTimerTimeout)
        self.maintenanceTimer.start(1000)

    def startTimer_maintenance(self):
        self.maintenanceTimer.timeout.connect(self.maintenanceTimerTimeout)
        self.maintenanceTimer.start(1000)

    def timerTimeout(self):
        try:
            self.time_left_int -= 1

            if (self.time_left_int == 60) or (self.time_left_int == (TIMER_DURATION_INT / 2)) or (self.time_left_int == (TIMER_DURATION_INT / 4)):
                self.show()

                # in case timer suddenly stops
                self.pauseAppTimer()
                self.appTimer.disconnect()
                if not self.appTimer.isActive():
                    self.continueTimer()

                message_resettmr_box_widget = QWidget()
                message_resettmr_box = QMessageBox
                message_resettmr_box.setWindowIcon(message_resettmr_box_widget, self.icon)
                message_resettmr_box.setWindowFlag(message_resettmr_box_widget, QtCore.Qt.WindowStaysOnTopHint)
                popup = message_resettmr_box.warning(message_resettmr_box_widget, '',
                                             str(secs_to_minsec(self.time_left_int)) + " left. Do you want to reset the timer?",
                                             message_resettmr_box.Yes | message_resettmr_box.No)
                if popup == message_resettmr_box.Yes:
                    self.resetTimer()

            if self.time_left_int == 0:
                self.pauseSdtTimer()
                self.pauseAppTimer()
                logged_user = os.getenv('username')
                log_message = "User '" + str(logged_user) + "' has been logged off."
                print(
                    datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
                    flush=True)
                if checkEventSource(event_log_name, event_log_source) == "True":
                    addEvent(event_log_name, event_log_source, "110", log_message)
                else:
                    createEventLog(event_log_name, event_log_source)
                    addEvent(event_log_name, event_log_source, "110", log_message)
                sys.stdout.close()
                try:
                    os.remove("config.yaml")
                except OSError as e:
                    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[WARNING] - " + str(e), flush=True)
                os.system('cmd /c "shutdown /l /f"')
                sys.exit(app.exec_())

            self.update_app_timer()
        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
                  flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
                  flush=True)

    def maintenanceTimerTimeout(self):
        try:
            self.maintenanceTimerInterval -= 1

            if self.maintenanceTimerInterval == 0:
                self.pauseSdtTimer()
                self.ThreadingClass = ThreadingClass()
                self.ThreadingClass.start()
                self.ThreadingClass.maintenance_signal.connect(self.updateMAINTENANCEStatus)

            self.update_maintenance_timer()
        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
                  flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
                  flush=True)

    def pauseAppTimer(self):
        self.appTimer.stop()

    def pauseSdtTimer(self):
        self.maintenanceTimer.stop()

    def continueTimer(self):
        self.appTimer.timeout.connect(self.timerTimeout)
        self.appTimer.start(1000)

    def update_app_timer(self):
        minsec = secs_to_minsec(self.time_left_int)
        self.timerLabel.setText(minsec)
        self.tray_icon.setToolTip(minsec + " remaining")

    def update_maintenance_timer(self):
        minsec = secs_to_minsec(self.maintenanceTimerInterval)
        self.ttcStatus_lbl.setText("Time to check MAINTENANCE: " + minsec)

    def retryMAINTENANCEcheck(self):
        self.maintenanceStatus_lbl.setText("Retrying...")
        self.retry_maintenance_btn.hide()
        self.maintenanceTimerInterval = 1

    def resetTimer(self):
        try:
            self.time_left_int = TIMER_DURATION_INT
            log_message = "Reset timer initiated. Setting time back to " + str(secs_to_minsec(TIMER_DURATION_INT)) + " (minutes:seconds)"
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)
            if checkEventSource(event_log_name, event_log_source) == "True":
                addEvent(event_log_name, event_log_source, "110", log_message)
            else:
                createEventLog(event_log_name, event_log_source)
                addEvent(event_log_name, event_log_source, "110", log_message)
        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var),
                  flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e),
                  flush=True)

    def updateMAINTENANCEStatus(self, value):
        self.pauseAppTimer()
        self.ttcStatus_lbl.setText("Checking MAINTENANCE status...")
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "Checking MAINTENANCE status...", flush=True)

        try:
            if "True" in value:
                # Changing text and disabling the button
                self.maintenanceStatus_lbl.setText("MAINTENANCE status: Active (Logoff timer freeze)")
                self.resettmr_btn.setEnabled(False)

                # disconnects the thread to reset the interval count of the timers.
                self.maintenanceTimer.disconnect()

                if self.appTimer.isActive():
                    self.appTimer.disconnect()

                log_message = "MAINTENANCE status: True"
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)

                # Initialize the main timer and the MAINTENANCE timer
                self.maintenanceTimerInterval = MAINTENANCE_TIMER_DURATION_INT
                self.startTimer_maintenance()
            elif "False" in value:
                # Changing text and enabling the button
                self.maintenanceStatus_lbl.setText("MAINTENANCE status: Inactive")
                self.resettmr_btn.setEnabled(True)

                # disconnects the thread to reset the interval count of the timers.
                self.maintenanceTimer.disconnect()
                self.appTimer.disconnect()

                log_message = "MAINTENANCE status: False"
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)

                # Initialize the main timer and the MAINTENANCE timer
                self.maintenanceTimerInterval = MAINTENANCE_TIMER_DURATION_INT

                if not self.appTimer.isActive():
                    self.continueTimer()
                self.startTimer_maintenance()
            else:
                self.maintenanceStatus_lbl.setText("MAINTENANCE status: Unknown")
                self.resettmr_btn.setEnabled(False)

                # disconnects the thread to reset the interval count of the timers.
                self.maintenanceTimer.disconnect()

                if self.appTimer.isActive():
                    self.appTimer.disconnect()

                log_message = "MAINTENANCE status: Unknown"
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)

                # Initialize the main timer and the MAINTENANCE timer
                self.maintenanceTimerInterval = MAINTENANCE_TIMER_DURATION_INT
                self.startTimer_maintenance()
                self.retry_maintenance_btn.show()

        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var), flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e), flush=True)
            if checkEventSource(event_log_name, event_log_source) == "True":
                addEvent(event_log_name, event_log_source, "113", str(e))
            else:
                createEventLog(event_log_name, event_log_source)
                addEvent(event_log_name, event_log_source, "113", str(e))

    def updateMAINTENANCEStatus_first_time(self, value):
        self.pauseAppTimer()
        print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "Checking MAINTENANCE status...", flush=True)

        try:
            if MAINTENANCE_TIMER_DURATION_INT == 0:
                self.maintenanceStatus_lbl.setText("MAINTENANCE status: Checking disabled")
                self.resettmr_btn.setEnabled(True)
                self.pauseSdtTimer()
                self.continueTimer()
                log_message = "MAINTENANCE status: Checking disabled"
                print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message,
                      flush=True)
            else:
                if "True" in value:
                    self.maintenanceStatus_lbl.setText("MAINTENANCE status: Active (Logoff timer freeze)")
                    self.resettmr_btn.setEnabled(False)
                    self.startTimer_maintenance()
                    log_message = "MAINTENANCE status: True"
                    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)
                elif "False" in value:
                    self.maintenanceStatus_lbl.setText("MAINTENANCE status: Inactive")
                    self.resettmr_btn.setEnabled(True)
                    self.startAppTimer()
                    log_message = "MAINTENANCE status: False"
                    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)
                else:
                    self.maintenanceStatus_lbl.setText("MAINTENANCE status: Unknown")
                    self.resettmr_btn.setEnabled(False)
                    self.startTimer_maintenance()
                    self.retry_maintenance_btn.show()
                    log_message = "MAINTENANCE status: Unknown"
                    print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + log_message, flush=True)
        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var), flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e), flush=True)
            if checkEventSource(event_log_name, event_log_source) == "True":
                addEvent(event_log_name, event_log_source, "113", str(e))
            else:
                createEventLog(event_log_name, event_log_source)
                addEvent(event_log_name, event_log_source, "113", str(e))


class ThreadingClass(QtCore.QThread):
    maintenance_signal = QtCore.pyqtSignal(str)

    def __init__(self):
        super(ThreadingClass, self).__init__()

    def run(self):
        try:
            if not os.path.exists("<product_config_dir>\\<product>.conf"):
                print(datetime.datetime.now().astimezone().strftime(
                    "%m-%d-%Y %H:%M:%S [%z]") + "[WARN] - " + "<product>.conf not found.", flush=True)
                self.maintenance_signal.emit("Unknown")
            else:
                for i in range(3):
                    value = subprocess.run(["C:\\Python3\\python.exe",
                                    "<company_scripts>\\<product>_manage_maintenance.py", "-maintenanceJob", "status"],
                                capture_output=True, shell=True, text=True).stdout

                    if i == 2:
                        self.maintenance_signal.emit("Unknown")
                        break
                    elif "True" in value or "False" in value:
                        self.maintenance_signal.emit(value)
                        break
                    else:
                        print(datetime.datetime.now().astimezone().strftime(
                            "%m-%d-%Y %H:%M:%S [%z]") + "[INFO] - " + "MAINTENANCE Status: " + value + " Retrying...", flush=True)
        except Exception as e:
            var = traceback.format_exc()
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(var), flush=True)
            print(datetime.datetime.now().astimezone().strftime("%m-%d-%Y %H:%M:%S [%z]") + "[ERROR] - " + str(e), flush=True)
            self.maintenance_signal.emit("Unknown")


if __name__ == "__main__":
    if args["help"]:
        app = QtWidgets.QApplication(sys.argv)
        w = QWidget()
        w.setWindowIcon(iconFromBase64(image_icon))
        w.setWindowTitle("LE Session Manager")
        w.setFixedSize(450, 250)

        sys.stdout = open("tmp.txt", "w")
        parser.print_help()
        sys.stdout.close()

        with open("tmp.txt") as f:
            lines = f.read()

        text = QPlainTextEdit()
        text.setReadOnly(True)
        text.appendPlainText(lines)

        os.remove("tmp.txt")

        btn_close = QtWidgets.QPushButton("Close")
        btn_close.resize(btn_close.minimumSizeHint())
        btn_close.clicked.connect(QtCore.QCoreApplication.instance().quit)

        l = QVBoxLayout()
        l.addWidget(text)
        l.addWidget(btn_close)
        w.setLayout(l)
        w.show()
        sys.exit(app.exec_())

    elif args["version"]:
        app = QtWidgets.QApplication(sys.argv)
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText('Product Version: 1.4')
        msg.setWindowTitle("LE Session Manager")
        msg.setWindowIcon(iconFromBase64(image_icon))
        msg.show()
        sys.exit(app.exec_())

    lockfile = QtCore.QLockFile(QtCore.QDir.tempPath() + '/LE_Session_Manager.lock')
    if lockfile.tryLock(100):
        pre_start()
        app = QtWidgets.QApplication(sys.argv)
        QCoreApplication.setApplicationName('LE Session Manager')
        main_window = App()
        main_window.show()
        sys.exit(app.exec_())